第12章介绍了使用文件来保存程序状态,这种方式虽然简单、易用,但只适用于保存一些格式简单、数据量不太大的数据。
对于数据量巨大且具有复杂关系的数据,当然还是推荐使用数据库进行保存。

Python 为操作不同的数据库提供了不同的模块。别忘了,Python 的魅力之一就是它的模块,无论你想做什么,总能找到对应的模块。
可能有人会想,世界上那么多数据库,难道使用 Python 操作每个数据库都要学习对应的模块?理论上确实如此,但各位读者不用担心：
这些模块内 API 的设计大同小异,因此掌握 Python 的一个数据库模块之后,再看其他数据库模块时就会有似曾相识的感觉。

为了让读者体会使用 Python 操作不同数据库的相似性,本章会分别介绍如何使用 Python 操作 SQLite 内置数据库和开源的 MySQL 数据库。

Python 3.6默认内置了操作 SQLite 数据库的模块,但如果 Python 程序需要操作 MySQL 数据库,
则需要自行下载操作 MySQL 数据库的Python模块。

提示 ：世界上的数据库非常多,流行的商业级数据库有Oracle、DB2、SQL Server等,
通常这些数据库厂商都会提供对应的 Python 模块来操作相应的数据库;
开源的数据库有 MySQL、PostgreSQL 和 Firebird等,它们同样会提供对应的 Python 模块来操作相应的数据库。
前面提到这些数据库都是关系型数据库,而关系型数据库也不是唯一类型的数据库,目前一些 NoSQL 数据库也比较流行,如MangoDB、Redis 等。

本章主要介绍基于 SQL 的数据库操作方式,但本书并不打算介绍SQL 的 DDL、DML、查询语句的详细语法,
如果读者需要了解这方面的知识,可参考《疯狂Java讲义》的第13章。

13.1  Python数据库API简介

虽然 Python 需要为操作不同的数据库使用不同的模块,但不同的数据库模块并非没有规律可循——
因为它们基本都遵守 Python 制订的 DB API 协议,目前该协议的最新版本是2.0,因此这些数据库模块有很多操作其实都是相同的。
下面先介绍不同数据库模块之间的通用内容。

13.1.1 全局变量

Python 推荐支持 DB API2.0 的数据库模块都应该提供如下3个全局变量。
(1)apilevel：该全局变量显示数据库模块的 API 版本号。对于支持 DB API 2.0版本的数据库模块来说,该变量值通常就是2.0。
如果这个变量不存在,则可能该数据库模块暂时还不支持 DB API 2.0。读者应该考虑选择使用支持该数据库的其他数据库模块。
(2)threadsafety：该全局变量指定数据库模块的线程安全等级,该等级值为0~3,其中 3 代表该模块完全是线程安全的;
1表示该模块具有部分线程安全性,线程可以共享该模块,但不能共享连接;0则表示线程完全不能共享该模块。
(3)paramstyle：该全局变量指定当 SQL 语句需要参数时,可以使用哪种风格的参数。该变量可能返回如下变量值。
    ①format：表示在 SQL 语句中使用 Python 标准的格式化字符串代表参数。
    例如,在程序中需要参数的地方使用%s,接下来程序即可为这些参数指定参数值。
    ②pyformat：表示在 SQL 语句中使用扩展的格式代码代表参数。比如使用%(name),
    这样即可使用包含 key 为 name 的字典为该参数指定参数值。
    ③qmark：表示在 SQL 语句中使用问号(?)代表参数。在 SQL 语句中有几个参数,全部用问号代替。
    ④numeric：表示在 SQL 语句中使用数字占位符(:N)代表参数。
    例如：1代表一个参数,:2 也表示一个参数,这些数字相当于参数名,因此它们不一定需要连续。
    ⑤named：表示在 SQL 语句中使用命名占位符(:name)代表参数。例如：name 代表一个参数,:age也表示一个参数。

通过查阅这些全局变量,即可大致了解该数据库 API 模块的对外的编程风格,至于该模块内部的实现细节,
完全由该模块实现者负责提供,通常不需要开发者关心。

13.1.2	数据库API 的核心类

遵守 DB API 2.0 协议的数据库模块通常会提供一个 connect()函数,该函数用于连接数据库,并返回数据库连接对象。

数据库连接对象通常会具有如下方法和属性。
cursor(factory=Cursor):打开游标。
commit():提交事务。
rollback():回滚事务。
close():关闭数据库连接。
isolation_level:返回或设置数据库连接中事务的隔离级别。
in_transaction:判断当前是否处于事务中。

上面第一个方法可以返回一个游标对象,游标对象是 Python DB API 的核心对象,该对象主要用于执行各种 SQL 语句,
包括 DDL、DML、select 查询语句等。使用游标执行不同的 SQL 语句返回不同的数据。

游标对象通常会具有如下方法和属性。
execute(sql[,parameters]):执行 SQL 语句。parameters参数用于为 SQL 语句中的参数指定值。
executemany(sql,seq_of_parameters):重复执行 SQL 语句。可以通过 seq_of_parameters 序列为 SQL 语句中的参数指定值,
该序列有多少个元素,SQL 语句被执行多少次。
executescript(sql script):这不是 DB API 2.0 的标准方法。该方法可以直接执行包含多条 SQL 语句的 SQL 脚本。
fetchone():获取查询结果集的下一行。如果没有下一行,则返回None。
fetchmany(size=cursor.arraysize):返回查询结果集的下 N 行组成的列表。如果没有更多的数据行,则返回空列表。
fetchall():返回查询结果集的全部行组成的列表。
close():关闭游标。
rowcount:该只读属性返回受 SQL 语句影响的行数。对于executemany()方法,该方法所修改的记录条数也可通过该属性获取。
lastrowid:该只读属性可获取最后修改行的rowid。
arraysize:用于设置或获取fetchmany()默认获取的记录条数,该属性默认为1。有些数据库模块没有该属性。
description:该只读属性可获取最后一次查询返回的所有列的信息。
connection:该只读属性返回创建游标的数据库连接对象。有些数据库模块没有该属性。

总结来看,Python 的 DB API 2.0 由一个 connect()开始,一共涉及数据库连接和游标两个核心 API。它们的分工如下。
数据库连接：用于获取游标、控制事务。
游标：执行各种 SQL 语句。

掌握了上面这些 API 之后,接下来可以大致归纳出 Python DB API 2.0 的编程步骤。

13.1.3 操作数据库的基本流程

使用 Python DB API 2.0 操作数据库的基本流程如下。
①调用 connect()方法打开数据库连接,该方法返回数据库连接对象。
②通过数据库连接对象打开游标。
③使用游标执行 SQL 语句(包括DDL、DML、select 查询语句等)。如果执行的是查询语句,则处理查询数据。
④关闭游标。
⑤关闭数据库连接。