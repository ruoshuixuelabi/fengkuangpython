"""
13.2.5	事务控制

事务是由一步或几步数据库操作序列组成的逻辑执行单元,这一系列操作要么全部执行,要么全部放弃执行。
程序和事务是两个不同的概念。 一般而言,在一段程序中可能包含多个事务。

事务具备4种特性：原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)和持续性(Durability)。这4种特性也简称为ACID。

原子性：事务是应用中最小的执行单位,就如原子是自然界的最小颗粒,具有不可再分的特征一样,事务是应用中不可再分的最小逻辑执行体。

一致性：事务执行的结果,必须使数据库从一种一致性状态变到另一种一致性状态。
当数据库只包含事务成功提交的结果时,数据库处于一致性状态。
如果系统运行发生中断,某个事务尚未完成而被迫中断,而该未完成的事务对数据库所做的修改已被写入数据库中,
此时数据库就处于一种不正确的状态。比如银行在两个账户之间转账,从A 账户向B 账户转入1000元,系统先减少A 账户的1000元,
然后再为B 账户增加1000元。如果全部执行成功,数据库处于一致性状态;如果仅执行完A 账户金额的修改,而没有增加B 账户的金额,
则数据库就处于不一致性状态。因此, 一致性是通过原子性来保证的。

隔离性：各个事务的执行互不干扰,任意一个事务的内部操作对其他并发的事务都是隔离的。
也就是说,并发执行的事务之间不能看到对方的中间状态,它们不能互相影响。

持续性：持续性也称为持久性(Persistence),指事务一旦提交,对数据所做的任何改变都要记录到永久存储器中,通常就是保存到物理数据库中。

当事务所包含的任意一个数据库操作执行失败后,应该回滚(rollback)事务,使在该事务中所做的修改全部失效。
事务回滚有两种方式：显式回滚和自动回滚。
(1)显式回滚：调用数据库连接对象的rollback。
(2)自动回滚：系统错误,或者强行退出。

正如前面程序所介绍的,如果程序执行了DML  语句后没有执行commit()方法,则不会提交事务,程序所做的修改不会被提交到底层数据库。

13.2.6     执行SQL脚本

SQLite 数据库模块的游标对象还包含了一个executescript()方法,这不是一个标准的 API 方法,这意味着在其他数据库 API
模块中可能没有这个方法。但是这个方法却很实用,它可以执行一段 SQL 脚本。

例如,如下程序使用executescript()方法执行一段SQL 脚本。
"""
# 导入访问SQLite的模块
import sqlite3

# ①、打开或创建数据库
# 也可以使用特殊名：:memory:代表创建内存中的数据库
conn = sqlite3.connect('first.db')
# ②、获取游标
c = conn.cursor()
# ③、调用executescript()方法执行一段SQL脚本
c.executescript('''
    insert into user_tb values(null, '武松', '3444', 'male');  
    insert into user_tb values(null, '林冲', '44444', 'male');
    create table item_tb(_id integer primary key autoincrement,
	name,
	price);
    ''')
conn.commit()
# ④、关闭游标
c.close()
# ⑤、关闭连接
conn.close()
"""
上面程序中的粗体字代码调用executescript()方法执行一段复杂的 SQL 脚本,在这段SQL 脚本中包含了两条 insert 语句,
该语句负责向 user_tb 表中插入记录,还使用create语句创建了一个数据表。

运行上面程序,可以看到first.db数据库中多了一个 item_tb 数据表, user_tb 数据表被插入了两条记录。

此外,为了简化编程, SQLite 数据库模块还为数据库连接对象提供了如下3个方法。
(1)execute(sql[,parameters]): 执行 一 条SQL 语句。
(2)executemany(sql[,parameters]): 根据序列重复执行SQL 语句。
(3)executescript(sql script): 执 行SQL 脚本。

读者可能会发现,这3个方法与游标对象所包含的3个方法完全相同。
事实正是如此,数据库连接对象的这3个方法都不是DB API 2.0  的标准方法,它们只是游标对象的3个方法的快捷方式,
因此在用法上与游标对象的3个方法完全相同。
"""
