"""
19.4.7	雷达图

雷达图适合用于分析各对象在不同维度的优势和劣势,通过雷达图可对比每个对象在不同维度的得分。
假如我们从表19.1所示的 5 个方面(平台健壮性、语法易用性、社区活跃 度、市场份额和未来趋势)的得分来评价各编程语言的优势。

编程语言对比
                    平台健壮性	语法易用性	社区活跃度	市场份额	未来趋势
Java	            5	                4.0	            5	                    5	            5
C	                4.8	            2.8	            4.8	                4.8	        4.9
C++	            4.5	            2.9	            4.6	                4.0	        4.9
Python	    4.0	            4.8	            4.9	                4.0	        5
C#	            3.0	            4.2	            2.3	                3.5	        2
PHP	            4.8	            4.3	            3.9	                3.0	        4.5

对于表19.1所示的对比数据,我们可以使用雷达图来展示各编程语言在不同维度的优势。
"""
import pygal

# 准备数据
data = [[5, 4.0, 5, 5, 5],
        [4.8, 2.8, 4.8, 4.8, 4.9],
        [4.5, 2.9, 4.6, 4.0, 4.9],
        [4.0, 4.8, 4.9, 4.0, 5],
        [3.0, 4.2, 2.3, 3.5, 2],
        [4.8, 4.3, 3.9, 3.0, 4.5]]
# 准备标签
labels = ['Java', 'C', 'C++', 'Python', 'C#', 'PHP']
# 创建pygal.Radar对象（雷达图）
rader = pygal.Radar()
# 采用循环为雷达图添加数据
for i, per in enumerate(labels):
    rader.add(labels[i], data[i])
rader.x_labels = ['平台健壮性', '语法易用性', '社区活跃度', '市场份额', '未来趋势']
rader.title = '编程语言对比图'
# 控制各数据点的大小
rader.dots_size = 8
# 设置将图例放在底部
rader.legend_at_bottom = True
# 指定将数据图输出到SVG文件中
rader.render_to_file('language_compare.svg')
"""
上面程序中第一行粗体字代码创建了 pygal.Rader 对象,接下来程序使用循环为雷达图添加数据。
在雷达图上会显示各编程语言在不同维度的得分点,程序中第二行粗体字代码设置了得分点的大小。

运行该程序,将会生成如图19.32所示的雷达图。
"""