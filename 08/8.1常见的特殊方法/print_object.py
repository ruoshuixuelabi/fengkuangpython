"""
1.  在 Python 类中有些方法名、属性名的前后都添加了双下画线,这种方法、属性通常都属于 Python 的特殊方法和特殊属性,
开发者可以通过重写这些方法或直接调用这些方法来实现特殊的功能。最常见的特殊方法就是前面介绍的构造方法：__init__ ,
开发者可以通过重写类中的 __init__ 方法来实现自己的初始化逻辑。
2.  Python 是一门尽量简单的语言,它不像某些语言(如Java)需要让类实现接口, 并实现接口中的方法。
Python 采用的是一种"约定"的机制, Python 按照约定,以特殊名字的方法、属性来提供特殊的功能。
3.  Python 类中的特殊方法、特殊属性有些需要开发者重写,有些则可以直接调用,掌握这些常见的特殊方法、特殊属性也是非常重要的。
4.  当读者运行上面程序时,可能会看到不同的输出结果：at 后的16位十六进制数字可能发生改变。
但这个输出结果是怎么来的呢?按道理来说, print()函数只能在控制台打印字符串,而Item 实例是内存中的一个对象,
怎么能直接转换为字符串输出呢?事实上,当使用该方法输出Item 对象时,实际上输出的是 Item 对象的    __repr__ ()方法的返回值。
也就是说,下面两行代码的效果完全一样
5.  __repr__ (是 Python 类中的一个特殊方法,由于object类已提供了该方法,而所有的Python类都是object类的子类,
因此所有的Python 对象都具有 __repr__()方法。
6.  因此,当程序需要将任何对象与字符串进行连接时,都可先调用 __repr__(方法将对象转换成字符串,然后将两个字符串连接在一起。例如如下代码。
im_str  = im.__repr__()+""
7.  __repr__ 是一个非常特殊的方法,它是一个"自我描述"的方法,该方法通常用于实现这样一个功能：
当程序员直接打印该对象时,系统将会输出该对象的"自我描述"信息,用来告诉外界该对象具有的状态信息。
"""


class Item:
    def __init__(self, name, price):
        self.name = name
        self.price = price


# 创建一个Item对象,将之赋给im变量
im = Item('鼠标', 29.8)
# 打印im所引用的Item对象
print(im)

im_str = im.__repr__() + ""
print(im_str)
