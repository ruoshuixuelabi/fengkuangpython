9.4 查看模块内容

在导入模块之后,开发者往往需要了解模块包含哪些功能,比如包含哪些变量、哪些函数、哪些类等,
还希望能查看模块中各成员的帮助信息,掌握这些信息才能正常地使用该模块。

9.4.1 模块包含什么

为了查看模块包含什么,可以通过如下两种方式。
(1)使用dir()函数。
(2)使用模块本身提供的 __all__ 变量。

前面第2章已经介绍过 dir()函数的基本用法,该函数可用于返回模块或类所包含的全部程序单元(包括变量、函数、类和方法等),
但直接使用 dir()函数默认会列出模块内所有的程序单元,包括以下画线开头的程序单元,而这些以下画线开头的程序单元其实并不希望被外界使用。

比如在 Python 的交互式解释器中执行如下命令来导入 string 模块(Python 内置的用于丰富字符串功能的模块)
import  string

然后通过dir()函数来查看该模块的内容,将可以看到如下输出结果。
dir(string)

很明显,该模块内有大量以下画线开头的程序单元,其实这些程序单元并不希望被其他程序使用,因此列出这些程序单元意义不大。

为了过滤这些以下画线开头的程序单元,我们可以使用如下列表推导式来列出模块中的程序单元。
[e for e   in   dir(string) if not  e.startswith('_')]

上面粗体字命令使用 for 循环的列表推导式列出了dir(string)返回的所有不以下画线开头的程序单元,
它们才是该模块希望被其他程序使用的程序单元。

此外,本章前面还介绍过模块中的 __all__ 变量,该变量相当于该模块开放的功能接口,因此也可通过该模块的 __all__ 变量来查看模块内的程序单元。
例如,在交互式解释器中输入如下命令。
string.__all__

对比前面列表推导式列出的结果和此处 __all__ 变量列出的结果,不难发现二者的输出结果大致相同,
这说明使用这两种方式都可以查看到模块所包含的程序单元。

注意：并不是所有模块都会提供 __all__ 变量的,有些模块并不提供 __all__ 变量,在这种情况下,只能使用列表推导式来查看模块中的程序单元。

9.4.2 使用 __doc__属性查看文档

前面介绍了使用 help() 函数来查看程序单元的帮助信息。比如导入 string 模块之后,即可使用 help()函数来查看指定程序单元的帮助信息。

例如,在交互式解释器中输入如下命令来查看string模块下capwords()函数的作用。
help(string.capwords)

通过上面描述可以看到,capwords()函数的作用就是将给定的 s 字符串中每个单词的首字母变成大写的。
该函数可通过sep 参数指定分隔符;如果不指定sep 参数,该字符串默认以空白作为分隔符。

在查看了帮助信息之后,接下来通过如下命令来测试string.capwords()函数的用法。
string.capwords('abc  xyz')
'Abc   Xyz'
string.capwords('abc;xyz',sep=';')
'Abc;Xyz'

上面代码在第一次使用capwords()函数时,没有指定sep 参数,因此默认以空格为分隔符,这意味着程序将abc xyz分成abc 和 xyz 两个单词,
因此该函数将a、x 两个字母变成大写的;在第二次使用capwords()函数时,指定sep 参数为";",这意味着以";"为分隔符将abc;xyz
分成abc 和 xyz 两个单词,因此程序将a、x 两个字母变成大写的。

需要说明的是,使用help()函数之所以能查看到程序单元的帮助信息,其实完全是因为该程序单元本身有文档信息,也就是有 __doc__ 属性。
换句话说,使用 help()函数查看的其实就是程序单 元的 __doc__ 属性值。

例如,使用print(string.capwords.__doc__)命令来查看capwords()的帮助信息,将会看到如下输出结果。

对比help(string.capwords)和print(string.capwords.__doc__)两个命令的输出结果,不难看到它们的输出结果完全相同,
这说明使用help()函数查看的就是程序单元的 __doc__ 属性值。

提示：从理论上说,应该为每个程序单元都编写完备而详细的文档信息,这样开发者只要通过help()函数即可查看该程序单元的文档信息,
完全不需要查看文档。但不得不说的是,有些程序单元的文档信息并不是很详细,此时可能需要借助于Python库的参考文档：
https://docs.python.org/3/library/index.html

9.4.3 使用 __file__ 属性查看模块的源文件路径

除可以查看模块的帮助信息之外,还可以直接阅读模块的源代码来掌握模块功能,提升 Python 编程能力。

提示：不管学习哪种编程语言,认真阅读那些优秀的框架、库的源代码都是非常好的学习方法。

通过模块的 __file__ 属性即可查看到指定模块的源文件路径。例如,在交互式解释器中输入 string.__file__ 即可看到如下输出结果。

这说明string模块对应的文件就是保存在D:\Python\Python36lib\目录下的string.py文件,
开发者完全可以直接打开该文件来查看该模块的全部源代码。
需要说明的是,并不是所有模块都是使用 Python 语言编写的,有些与底层交互的模块可能是用 C 语言编写的,
而且是C 程序编译之后的效果,因此这种模块可能没有 __file__ 属性。

9.5 本章小结

本章介绍了 Python 编程的重要内容：模块。模块既是使用Python进行模块化编程的重要方式,也是扩展Python功能的重要手段。
大量第三方模块和库极大地扩展了 Python 语言的能力,形成了 Python 强大的生态圈。
学习本章内容需要掌握导入模块的两种方式和导入模块的本质;也需要重点掌握自定义模块的语法,包括为模块编写说明文档和测试代码。
此外,还需要重点理解包和模块 的区别与联系,并掌握使用包管理模块的方式。

本章最后讲解了如何查看、使用模块的内容,包括查看模块所包含的程序单元,查看这些程序单元的帮助信息,以及如何查看模块源文件的存储路径。