"""
在编写一个 Python 模块之后,如果直接用 import 或 from…import 来导入该模块,Python 通常并不能加载该模块。
道理很简单： Python 怎么知道到哪里去找这个模块呢?
提示：编程其实并不难,就是用合适的语法告诉计算机,让它帮助完成某个工作。因此计算机能完成的事情,其实都是程序员预先告诉它的。

为了让 Python 能找到我们编写(或第三方提供)的模块,可以用以下两种方式来告诉它。
(1)使用环境变量。
(2)将模块放在默认的模块加载路径下。

下面详细介绍这两种方式。

 9.2.1 使用环境变量

Python将会根据 PYTHONPATH 环境变量的值来确定到哪里去加载模块。 PYTHONPATH 环境变量的值是多个路径的集合,
这样 Python 就会依次搜索 PYTHONPATH 环境变量所指定的多个路径,试图从中找到程序想要加载的模块。

下面介绍在不同平台上设置环境变量的方式。
"""
# 两次导入module1,并指定其别名为md
import module1 as md
import module1 as md

print(md.my_book)
md.say_hi('Charlie')
user = md.User('孙悟空')
print(user)
user.walk()
"""
上面程序在导入了 module1 模块之后,完全可以正常地使用 module1 中的程序单元——
依次测试了 module1 中的变量、函数和类,它们都是完全正常的。

这里为什么要两次导入 module1 模块呢?其实完全没必要,此处两次导入只是为了说明一点：Python很智能。

虽然上面程序两次导入了 module1 模块,但最后运行程序,我们看到输出语句只输出一条"这是 module1",
这说明第二次导入的 module1 模块并没有起作用,这就是 Python 的"智能"之处。

当程序重复导入同一个模块时,Python 只会导入一次。道理很简单,因为这些变量、函数、类等程序单元都只需要定义一次即可,何必导入多次呢?

相反,如果 Python 允许导入多次,反而可能会导致严重的后果。
比如程序定义了 foo 和 bar 两个模块,假如 foo 模块导入了 bar 模块,而 bar 模块又导入了 foo 模块——
这似乎形成了无限循环导入,但由于 Python 只会导入一次,所以这个无限循环导入的问题完全可以避免。
"""
