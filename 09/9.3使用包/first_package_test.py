"""
1.  下面通过如下程序来使用该包。
2.  再次强调,包的本质就是模块,因此导入包和导入模块的语法完全相同。因此,上面程序中第  一行粗体字代码导入了 first_package 包。
程序最后三行代码输出了包的说明文档、包的类型和包本身。
3.  运行该程序,可以看到如下输出结果。
4.  从上面的输出结果可以看出,在导入 first_package 包时,程序执行了该包所对应的文件夹下的 __init__.py;
从倒数第二行输出可以看到,包的本质就是模块；
从最后一行输出可以看到,使用impor  first_package 导入包的本质就是加载并执行该包下的 __init__.py 文件,
然后将整个文件内容赋值给与包同名的变量,该变量的类型是module
5.  与模块类似的是,包被导入之后,会在包目录下生成一个 __pycache__ 文件夹,并在该文件夹内为包生成一个 __init__.cpython-36.pyc文件。
6.  由于导入包就相当于导入该包下的 __init__.py文件,因此我们完全可以在  __init__.py文件中定义变量、函数、类等程序单元,
但实际上往往并不会这么做。想一想原因是什么?包的主要作用是包含多个模块,因此  __init__.py文件的主要作用就是导入该包内的其他模块。
"""
# 导入first_package包（模块）
import first_package

print('==========')
print(first_package.__doc__)
print(type(first_package))
print(first_package)
