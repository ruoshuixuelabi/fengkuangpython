"""
9.3	使用包

对于一个需要实际应用的模块而言,往往会具有很多程序单元,包括变量、函数和类等,如果将整个模块的所有内容都定义在同一个Python
源文件中,这个文件将会变得非常庞大,显然并不利于模块化开发。

9.3.1 什么是包

为了更好地管理多个模块源文件,Python 提供了包的概念。那么问题来了,什么是包呢?
(1)从物理上看,包就是一个文件夹,在该文件夹下包含了一个 __init__.py 文件,该文件夹可用于包含多个模块源文件。
(2)从逻辑上看,包的本质依然是模块。

根据上面介绍可以得到一个推论：包的作用是包含多个模块,但包的本质依然是模块,因此包也可用于包含包。
典型地,当我们为 Python 安装了 numpy 模块之后,可以在 Python 安装目录的 Lib\site-packages目录下找到一个 numpy 文件夹,
它就是前面安装的 numpy 模块(其实是一个包)。 该文件夹的内容如图9.4所示。

从图9.4可以看出,在numpy 包(也是模块)下既包含了matlib.py等模块源文件,也包含了core 等子包(也是模块)。
这正对应了我们刚刚介绍的：包的本质依然是模块,因此包又可以包含包。

9.3.2 定义包

掌握了包是什么之后,接下来学习如何定义包。定义包更简单,主要有两步。
①创建一个文件夹,该文件夹的名字就是该包的包名。
②在该文件夹内添加一个 __init__.py 文件即可。

下面定义一个非常简单的包。先新建一个 first_package 文件夹,然后在该文件夹中添加一个 __init__.py文件,该文件内容如下。
"""
'''
这是学习包的第一个示例
'''
print('this is first_package')
"""
上面的 Python 源文件非常简单,该文件开始部分的字符串是该包的说明文档,接下来是一条简单的输出语句。
"""