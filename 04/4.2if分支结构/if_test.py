"""
Python 同样提供了现代编程语言都支持的两种基本流程控制结构：分支结构和循环结构。
其中分支结构用于实现根据条件来选择性地执行某段代码;循环结构则用于实现根据循环条件重复执行某段代码。
Python 使用 if 语句提供分支支持,提供了 while、for-in 循环,也提供了 break 和 continue 来控制程序的循环结构。

4.1 顺序结构

在任何编程语言中最常见的程序结构就是顺序结构。顺序结构就是程序从上到下一行行地执行,中间没有任何判断和跳转。

如果Python程序的多行代码之间没有任何流程控制,则程序总是从上向下依次执行,排在前面的代码先执行,排在后面的代码后执行。
这意味着如果没有流程控制,Python 程序的语句是一个顺序执行流,从上向下依次执行每条语句。

4.2  if分支结构

if分支使用布尔表达式或布尔值作为分支条件来进行分支控制。

Python 的 if 分支既可作为语句使用,也可作为表达式使用。下面先介绍 if 分支作为语句使用的情形。
if语句可使用任意表达式作为分支条件来进行分支控制。 Python 的if语句有如下三种形式。

第一种形式：
if expression:
    statements...

第二种形式：
if  expression:
    statements...
else:
    statements...

第三种形式：
if  expression:
    statements...
elif  expression:
    statements...
    ...//可以有零条或多条elif 语句
else:
    statement...

在上面 if 语句的三种形式中,第二种形式和第三种形式是相通的,如果第三种形式中的 elif 块不出现,则变成了第二种形式。

对于上面的 if 分支语句,执行过程是非常简单的——如果 if 条件为"真",程序就会执行 if 条件后面的多条语句;
否则就会依次判断 elif 条件,如果 elif 条件为"真",程序就会执行 elif 条件后面的多条语句 ……
如果前面所有条件都为"假",程序就会执行else后的代码块(如果有)。

在上面的条件语句中,if expression:、elif expression:及 else:后缩进的多行代码被称为代码块,
 一个代码块通常被当成一个整体来执行(除非在运行过程中遇到return、break、continue等关键字),因此这个代码块也被称为条件执行体。

Python 是一门很"独特"的语言,它的代码块是通过缩进来标记的(大部分语言都使用花括号或end作为代码块的标记),
具有相同缩进的多行代码属于同一个代码块。如果代码莫名其妙地乱缩进,Python 解释器会报错。前文说过,Python 不是格式自由的语言。

关于 Python 的"缩进"风格,喜欢它的人说这是一种乐趣;
不喜欢它的人说这是：一门需要游标卡尺(一种长度测量仪器)的语言——因为你需要使用游标卡尺去测量每行代码的缩进。当然,这是一句玩笑话。
"""
s_age = input("请输入您的年龄:")
age = int(s_age)
if age > 20:
    # 只有当age > 20时,下面用整体缩进的代码块才会执行
    # 整体缩进的语句是一个整体,要么一起执行,要么一起不执行
    print("年龄已经大于20岁了")
    print("20岁以上的人应该学会承担责任...")
"""
运行上面代码,如果输入年龄小于20,将会看到如下运行结果。

请输入您的年龄：18

从上面代码可以看出,如果输入的年龄小于20,则程序没有任何输出,整体缩进的语句作为整体都不会执行。
运行上面代码,如果输入年龄大于20,将会看到如下运行结果。

请输入您的年龄:50
年龄已经大于20岁了
20岁以上的人应该学会承担责任...

从上面代码可以看出,如果输入的年龄大于20,则程序会执行整体缩进的代码块。
再次重复：Python 不是格式自由的语言,因此你不能随心所欲地缩进,必须按Python 语法要求缩进。下面详细介绍在缩进过程中可能导致的错误。
"""