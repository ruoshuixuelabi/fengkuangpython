"""
6.6 Python的动态性

Python 是动态语言,动态语言的典型特征就是：类、对象的属性、方法都可以动态增加和修改。
前面已经简单介绍过为对象动态添加属性和方法,本节将进一步介绍Python 的动态特征。

6.6.1   动态属性与 __slots__      

前面介绍了为对象动态添加方法,但是所添加的方法只是对当前对象有效,如果希望为所有实例都添加方法,则可通过为类添加方法来实现。

例如如下代码。

"""


class Cat:
    def __init__(self, name):
        self.name = name


def walk_func(self):
    print('%s慢慢地走过一片草地' % self.name)


d1 = Cat('Garfield')
d2 = Cat('Kitty')
# d1.walk() # AttributeError
# 为Cat动态添加walk()方法,该方法的第一个参数会自动绑定
Cat.walk = walk_func  # ①
# d1、d2调用walk()方法
d1.walk()
d2.walk()
"""
上面程序定义了一个 Cat 类,该 Cat 类只定义了一个构造方法,并未提供任何方法。
因此,程序第一行粗体字代码调用dl.walk()方法时会出现异常： Cat 类并没有walk()方法。

程序中①号代码为Cat 动态添加了walk()方法,为类动态添加方法时不需要使用 MethodType 进行包装,该函数的第一个参数会自动绑定。
为 Cat 动态添加walk()方法之后,Cat 类的两个实例 d1、d2 都具有了walk()方法,因此上面程序中最后两行d1、d2 都可调用walk()方法。

Python 的这种动态性固然有其优势,但也给程序带来了一定的隐患：程序定义好的类,完全有可能在后面被其他程序修改,
这就带来了一些不确定性。如果程序要限制为某个类动态添加属性和方法,则可通过 __slots__ 属性来指定。
"""