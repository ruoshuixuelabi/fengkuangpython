"""
5.2.5  函数的参数传递机制

1.  Python的参数值是如何传入函数的呢?这是由Python 函数的参数传递机制来控制的。
Python 中函数的参数传递机制都是"值传递"。所谓值传递,就是将实际参数值的副本(复制品)传入函 数,而参数本身不会受到任何影响。
2.  Python 里的参数传递类似于《西游记》里的孙悟空,孙悟空复制了一个假孙悟空, 这个假孙悟空具有的能力和真孙悟空相同,
可除妖或被砍头。但不管这个假孙悟空遇 到什么事,真孙悟空都不会受到任何影响。
3.  与此类似,传入函数的是实际参数值的复制品,不管在函数中对这个复制品如何操作,实际参数值本身不会受到任何影响。
4.  从下面的运行结果来看,在swap()函数里, a 和 b 的值分别是9、6,交换结束后,变量a 和 b 的值依然是6、9。
从这个运行结果可以看出,程序中实际定义的变量a 和 b, 并不是swap()函数里 的 a 和 b。
正如前面所讲的, swap()函数里的a 和 b 只是主程序中变量a 和 b 的复制品。下面通过示意图来说明上面程序的执行过程。
5.  下面程序开始定义了a、b 两个局部变量,这两个变量在内存中的存储示意图如图5.2所示。
当程序执行swap()函数时,系统进入swap()函数,并将主程序中的a、b 变量作为参数值传入swap()函数,但传入swap()函数的只是a、b 的副本,
而不是a、b 本身。进入swap()函数后,系统中产生了4个变量,这4个变量在内存中的存储示意图如图5.3所示。
6.  当在主程序中调用swap()函数时,系统分别为主程序和swap()函数分配两块栈区,用于保存它们的局部变量。
7.  将主程序中的a、b 变量作为参数值传入swap()函数,实际上是在swap()函数栈区中重新产生了两个变量a、b,
并将主程序栈区中a、b变量的值分别赋值给swap()函数栈区中的a、b参数(就是对swap()函数的a、b 两个变量进行初始化)。
此时,系统存在两个a变量、两个b变量,只是存在于不同的栈区中而已。
8.  程序在swap()函数中交换a、b两个变量的值,实际上是对图5.3中灰色区域的a、b 变量 进行交换。
交换结束后,输出swap()函数中a、b 变量的值,可以看到a 的值为9 ,b 的值为6, 此时在内存中的存储示意图如图5.4所示。
9.  对比图5.4与图5.2,可以看到两个示意图中主程序栈区中a、b 的值并未有任何改变,程序改变的只是swap()函数栈区中a、b 的值。
10. 这就是值传递的实质：当系统开始执行函数时,系统对形参执行初始化,就是把实参变量的值赋给函数的形参变量,
在函数中操作的并不是实际的实参变量。
"""


def swap(a, b):
    # 下面代码实现a、b变量的值交换
    a, b = b, a
    print("swap函数里，a的值是", \
          a, "；b的值是", b)


a = 6
b = 9
swap(a, b)
print("交换结束后，变量a的值是", \
      a, "；变量b的值是", b)
