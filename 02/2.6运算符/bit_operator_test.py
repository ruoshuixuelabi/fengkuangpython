"""
1. 位运算符通常在图形、图像处理和创建设备驱动等底层开发中使用。
使用位运算符可以直接操作数值的原始bit位，尤其是在使用自定义的协议进行通信时，使用位运算符对原始数据进行编码和解码也非常有效。
2. Python支持的位运算符有如下6个。
(1) & : 按位与 。
(2) |：按位或。
(3) ^：按位异或 。
(4) ~：按位取反 。
(5) <<：左位移运算符。
(6) >>：右位移运算符 。
表2.5 位运算符的运算法则

第一个操作数	第二个操作数	按位与	按位或	按位异或
0	                        0	                    0	        0	        0
0	                        1	                    0	        1	        1
1	                        0	                    0	        1	        1
1	                        1	                    1	        1	        0
按位非只需要一个操作数，这个运算符将把操作数在计算机底层的二进制码按位取反。
3. 上面的运算过程涉及与计算机存储相关的内容。首先我们要明白：所有数值在计算机底层都是以二进制形式存在的，
原码是直接将一个数值换算成二进制数。有符号整数的最高位是符号位，符号位为0代表正数，符号位为1代表负数。
无符号整数则没有符号位，因此无符号整数只能表示0和正数。
4. 为了方便计算，计算机底层以补码的形式保存所有的整数。补码的计算规则是：正数的补码和原码完全相同，负数的补码是其反码加1;
反码是对原码按位取反，只是最高位(符号位)保持不变。
5. Python 的右移运算符为：>>。对于“>>”运算符而言，把第一个操作数的二进制码右移指定位数后，
左边空出来的位以原来的符号位来填充。即：如果第一个操作数原来是正数，则左边补0;  如果第一个操作数是负数，则左边补1。
6. 在进行位移运算时，不难发现，左移 n 位就相当于乘以2的 n 次方，右移n 位 则 相当于除以2的n 次方
(如果不能整除，实际返回的结果是小于除得结果数值的最大 整数的)。不仅如此，进行位移运算只是得到了一个新的运算结果，
而原来的操作数本身是不会改变的。
"""
# 将输出1
print(5 & 9)
# 将输出13
print(5 | 9)

a = -5
# 将输出4
print(~a)
# 将输出12
print(5 ^ 9)

# 输出20
print(5 << 2)
# 输出-20
print(-5 << 2)

b = -5
# 输出-2
print(b >> 2)
