"""
2.6.9 in 运算符

Python 提供了in运算符,用于判断某个成员是否位于序列中,比如前面介绍的 str 就是一个序列,
因此程序可使用in运算符判断字符串是否包含特定子串。

除 in 运算符之外, Python 也提供了 in 的反义词： not in。

使用in运算符除可判断字符串是否包含特定子串之外,还可判断序列是否包含子序列。

2.6.10 运算符的结合性和优先级

所有的数学运算都是从左向右进行的,Python 语言中的大部分运算符也是从左向右结合的,
只有单目运算符、赋值运算符和三目运算符例外,它们是从右向左结合的,也就是说,它们是从右向左运算的。

乘法和加法是两个可结合的运算符,也就是说,这两个运算符左右两边的操作数可以互换位置而不会影响结果。

运算符有不同的优先级,所谓优先级就是在表达式运算中的运算顺序。表2.6中列出了包括分隔符在内的所有运算符的优先级顺序。
表2.6 运算符的优先级

运算符说明	Python运算符	                                            优先级
索引运算符	x[index]或x[index:index2[:index3]]	        18、19
属性访问	    x.attribute	                                                    17
乘方	            **	                                                                    16
按位取反		~                                                                      15
符号运算符	+或-	                                                                14
乘、除	        *、/、//、%	                                                    13
加、减	        +、 -	                                                            12
位移	            >>、<<	                                                        11
按位与	            &	                                                                10
按位异或	        ^	                                                                9
按位或		        |                                                                   8
比较运算符	==、!=、>、>=、<、<=	                            7
is运算符	        is、is not	                                                    6
in运算符	        in、not in	                                                5
逻辑非	            not	                                                            4
逻辑与	            and	                                                            3
逻辑或	            or	                                                            2

根据表2.6中运算符的优先级,我们分析4+4<<2语句的执行结果。程序先执行4+4得到结果8,再执行8<<2得到32。
如果使用"()"就可以改变程序的执行顺序,比如4+(4<<2),则先执行4<<2得到结果16,再执行4+16得到20。

虽然Python运算符存在优先级的关系,但并不推荐过度依赖运算符的优先级,因为这会导致程序的可读性降低。因此,在这里要提醒读者：
(1)不要把一个表达式写得过于复杂,如果一个表达式过于复杂,则把它分成几步来完成。
(2)不要过多地依赖运算符的优先级来控制表达式的执行顺序,这样可读性太差,应尽量使用"()"来控制表达式的执行顺序。

2.7 本章小结

本章主要介绍了Python编程的基础内容：变量和表达式。虽然Python是弱类型语言, Python变量本身没有类型,
可以"盛装"各种类型的数据,但变量所"盛装"的数据是有类型的,包括各 种数值型、字符串型、 bool型等。
因此本章的第一个重要部分就是Python的各种基本类型和字符 串,本章详细介绍了Python字符串的功能和用法。

本章的第二个重要部分就是Python的各种运算符,通过这些运算符就可以把变量和数值连接 成表达式。
Python 支持算术运算符、位运算符、索引运算符、赋值运算符、比较运算符、逻辑运 算符、三目运算符、
in运算符等各种功能丰富的运算符,掌握这些运算符是Python编程的基础。
"""
s = 'crazyit.org'
print('it' in s)  # True
print('it' not in s)  # False
print('fkit' in s)  # False
print('fkit' not in s)  # True
