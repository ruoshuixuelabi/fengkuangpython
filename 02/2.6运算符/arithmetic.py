"""
2.6.2 算术运算符

Python 支持所有的基本算术运算符,这些算术运算符用于执行基本的数学运算,如加、减、 乘、除和求余等。下面是7个基本的算术运算符。
(1) +：加法运算符。
除此之外,"+"还可以作为字符串(包括第3章要介绍的序列)的连接运算符
(2) -：减法运算符
此外,"- "除可以作为减法运算符之外,还可以作为求负的运算符。
但单目运算符"+"则不对操作数做任何改变
(3)*:乘法运算符
此外,"*"还可以作为字符串(包括第3章要介绍的序列)的连接运算符,表示将N个字符串连接起来

(4)/或//:除法运算符。 Python 的除法运算符有两个："/"表示普通除法,
使用它除出来的结果与平常数学计算的结果是相同的(即除不尽时,会产生小数部分);
而"//"表示整除,使用它除出来的结果只有整数部分,小数部分将会被舍弃。

此外,Python 不允许使用0作为除数,否则将会引发 ZeroDivisionError 错误。

在有些编程语言中,0作为除数会得到无穷大,包括正无穷大或负无穷大。

对于Python 2.x而言,它只提供了一个"/"运算符,该运算符是Python 3.x中"/"和"/"的综合版。
对于Python2.x 中的"/"而言,它既是整除运算符,也是非整除运算符。规则如下：
①当两个操作数都是整数时, Python 2.x中的"/"就是整除运算符。
②当两个操作数有一个是浮点数(或两个都是浮点数)时,Python 2.x中的"/"就是非整除运算符。

(5) %:求余运算符。Python不要求求余运算符的两个操作数都是整数,Python的求余运算符完全支持对浮点数求余。
求余运算的结果不一定总是整数,它是使用第一个操作数来除以第二个操作数,得到一个整除的结果后剩下的值就是余数。

由于求余运算也需要进行除法运算,因此求余运算的第二个操作数不能是0,否则程序会报出 ZeroDivisionError 错误。

(6) **:乘方运算符。 Python支持使用"**"作为乘方运算符,这是一个使用非常方便的运算符。
由于开方其实是乘方的逆运算,因此实际上使用"**"也可进行开方运算。例如如下代码。
"""
a = 5.2
b = 3.1
the_sum = a + b
# sum的值为8.3
print("the_sum的值为：", the_sum)
# 除此之外,"+"还可以作为字符串(包括第3章要介绍的序列)的连接运算符
s1 = 'Hello, '
s2 = 'Charlie'
# 使用+连接两个字符串
print(s1 + s2)

c = 5.2
d = 3.1
sub = c - d
# sub的值为2.1
print("sub的值为：", sub)

e = 5.2
f = 3.1
multiply = e * f
# multiply的值为16.12
print("multiply的值为：", multiply)

s3 = 'crazyit '
# 使用*将5个字符串连接起来
print(s3 * 5)

print("19/4的结果是:", 19 / 4)
print("19//4的结果是:", 19 // 4)
aa = 5.2
bb = 3.1
# aa / bb的值将是1.67741935483871
print("aa/bb的值是:", aa / bb)
# aa // bb值将是1.0
print("aa//bb的值是:", aa // bb)

print('5的2次方：', 5 ** 2)  # 25
print('4的3次方：', 4 ** 3)  # 64
print('4的开平方：', 4 ** 0.5)  # 2.0
print('27的开3次方：', 27 ** (1 / 3))  # 3.0
