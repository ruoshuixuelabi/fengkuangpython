"""
2.3 数值类型

数值类型是计算机程序最常用的一种类型,既可用于记录各种游戏的分数、游戏角色的生命值、伤害值等,也可记录各种物品的价格、数量等,
Python 提供了对各种数值类型的支持,如支持整型、浮点型和复数。

2.3.1 整型

Python3 的整型支持各种整数值,不管是小的整数值,还是大的整数值,
Python都能轻松处理(不像某些语言,short、int、long等整型增加了开发难度)。

例如如下代码
"""
# 定义变量a,赋值为56
a = 56
print(a)
# 为a赋值一个大整数
a = 9999999999999999999999
print(a)
# type()函数用于返回变量的类型 这里 Python2 和3返回是不同的,Python3 还是当做int
print(type(a))
# Python 的整型支持 None 值(空值),例如如下代码
a = None
print(a)
"""
提示：对于没有编程基础的读者,同样可以在交互式解释器中逐行"试验"上面程序来观看运行效果。
由于篇幅限制,本书后面的程序不再详细列出在交互式解释器中逐行"试验"的过程;但没有基础的读者依然可以按照这种方式来"玩"Python。

上面程序中粗体字代码将 9999999999999999999999 大整数赋值给变量 a,Python 也不会发生溢出等问题,程序运行一样正常——
这就是 Python 的魅力：别搞那些乱七八糟的底层细节,非专业人士也不关心什么字节之类的细节。

使用Python 3.x运行上面程序,可以看到如下输出结果。

56
9999999999999999999999
<class 'int'>

从上面的输出结果可以看出,此时 a 依然是int类型。

但如果用Python 2.x运行上面程序,则可以看到如下输出结果。
56
9999999999999999999999
<type 'long'>

对比两种输出结果,不难发现：不管是Python 3.x 还是 Python 2.x,Python 完全可以正常处理很大的整数,
只是Python 2.x底层会将大整数当成 long 类型处理——但开发者通常不需要理会这种细节。

Python 的整型支持 None 值(空值),例如如下代码(程序清单同上)。
a = None
print(a)
"""
