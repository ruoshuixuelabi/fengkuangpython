"""
Python 的整型数值有4种表示形式。
(1)十进制形式：最普通的整数就是十进制形式的整数。
(2)二进制形式：以 0b 或 0B 开头的整数就是二进制形式的整数。
(3)八进制形式：以0o 或 0O 开头的整数就是八进制形式的整数(第二个字母是大写或小写的O)。
(4)十六进制形式：以 0x 或 0X 开头的整数就是十六进制形式的整数,其中10~15分别以a~f(此处的 a~f 不区分大小写)来表示。

下面代码片段使用了其他进制形式的数。

为了提高数值(包括浮点型)的可读性, Python 3.x 允许为数值(包括浮点型)增加下画线作为分隔符。这些下画线并不会影响数值本身。
例如如下代码(程序清单同上)。

注意：Python 2.x还支持八进制形式的整数(要求以0开头),但由于八进制形式的整数其实很"鸡肋",所以Python 3.x删除了这个功能。
此外, Python 2.x 不支持在数值中使用下画线,
"""
# 以0x或0X开头的整数数值是十六进制的整数
hex_value1 = 0x13
hex_value2 = 0XaF
print("hexValue1的值为：", hex_value1)
print("hexValue2的值为：", hex_value2)
# 以0b或0B开头的整数数值是二进制的整数
bin_val = 0b111
print('bin_val的值为：', bin_val)
bin_val = 0B101
print('bin_val的值为：', bin_val)
# 以0o或0O开头的整数数值是八进制的整数
oct_val = 0o54
print('oct_val的值为：', oct_val)
oct_val = 0O17
print('oct_val的值为：', oct_val)
# 为了提高数值(包括浮点型)的可读性,Python 3.x允许为数值(包括浮点型)增加下画线作为分隔符。这些下画线并不会影响数值本身
# 在数值中使用下画线
one_million = 1_000_000
print(one_million)
price = 234_234_234  # price实际的值为234234234
android = 1234_1234  # android实际的值为12341234
