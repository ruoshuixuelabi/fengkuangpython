"""
经过漫长的软件开发、调试过程,开发人员终于得到了一个软件产品,但谁也没法保证这个软件产品是否满足实际要求。
为了检验该软件产品是否满足实际需要,必须对它进行测试。

通常软件测试应用由测试人员来完成,而不应该是开发人员。因此,软件测试的目的不是为了修复软件,不是为了证明软件是满足要求的、可用的,
而只是为了找出软件系统中存在的缺陷,然后将这些缺陷提交给 Bug 管理系统(如Bugzilla等)。
修复工作与软件测试人员无关,应该由软件开发人员来完成。

在传统的软件开发流程(如瀑布模型)中,习惯上将软件测试放在软件开发之后,也就是在软件开发完成后才进行软件测试;
但就目前实际的软件开发流程来看,软件开发和软件测试往往是同步进行的。
开发人员不断地为系统开发新功能,而测试人员则不断地测试它们,找出这些新功能中可能存在的缺陷,并提交给Bug 管理系统,
开发者再修复这些缺陷。在一些更激进的开发流程(如 测试驱动开发)中,甚至倡导先进行测试——
也就是先提供测试用例,然后再开发满足测试要求的 软件。总之,软件测试已经成为软件工程中重要的一环,不可分割。

16.1 使用pydoc生成文档

前面已经介绍了为函数、类、方法等编写文档——只要在函数、类、方法定义后定义一个字符串即可。
前面也介绍了使用 help() 函数和 __doc__ 属性来查看函数、类、方法的文档,但这种方式总是在控制器中查看,有时候难免不太方便。

借助于 Python 自带的 pydoc 模块,可以非常方便地查看、生成帮助文档,该文档是HTML 格式的,因此查看、使用起来非常方便。

这里先在codes\16\16.1 目录下提供如下Python 源文件(模块)。
"""
MY_NAME = '疯狂软件教育中心'


def say_hi(name):
    """
    定义一个打招呼的函数
    返回对指定用户打招呼的字符串
    """
    print("执行say_hi函数")
    return name + '您好！'


def print_rect(height, width):
    """
    定义一个打印矩形的函数
    height - 代表矩形的高
    width - 代表矩形的宽
    """
    print(('*' * width + '\n') * height)


class User:
    NATIONAL = 'China'
    '''
    定义一个代表用户的类
    该类包括name、age两个变量
    '''

    def __init__(self, name, age):
        """
        name初始化该用户的name
        age初始化该用户的age
        """
        self.name = name
        self.age = age

    def eat(self, food):
        """
        定义用户吃东西的方法
        food - 代表用户正在吃的东西
        """
        print('%s正在吃%s' % (self.name, food))


"""
上面代码定义了一个 fkmodule.py 源文件,也就是定义了一个 fkmodule 模块,该模块为函数、 类和方法都提供了文档说明。
下面将会示范如何使用pydoc 来查看、生成该模块的文档。

16.1.1	在控制台中查看文档

先看如何使用 pydoc 模块在控制台中查看 HTML 文档。使用 pydoc 模块在控制台中查看帮助文档的命令如下：
python -m pydoc 模块名

上面命令中的 -m 是 python 命令的一个选项,表示运行指定模块,此处表示运行 pydoc 模块。后面的"模块名"参数代表程序要查看的模块。

例如,在 codes\16\16.1 目录下运行如下命令。
python  -m   pydoc   fkmodule

上面命令表示使用 pydoc 查看 fkmodule 模块的命令。运行该命令,将看到如图 16.1 所示的输出结果。

按下空格键,pydoc 将会使用第二屏来显示文档信息,如图16.2所示。

从图16.1可以看出,使用pydoc 在控制台中查看文档时,由于一屏无法显示所有的文档信息,因此同样需要以分屏的形式来显示,
这样查看其实并不方便,与使用 help() 命令查看帮助信息的差别并不大。当然,在使用 pydoc 查看帮助信息时,
它会有自己的组织方式,它总是按如下顺序来显示模块中的全部内容。
(1)模块的文档说明：就是* .py 文件顶部的注释信息,这部分信息会被提取成模块的文档说明。
(2)CLASSES 部分：这部分会列出该模块所包含的全部类。
(3)FUNCTIONS 部分：这部分会列出该模块所包含的全部函数。
(4)DATA 部分：这部分会列出该模块所包含的全部成员变量。
(5)FILE部分：这部分会显示该模块对应的源文件。

不管怎么样,直接在控制台中查看指定模块的帮助信息依然不太方便,下面将会使用 pydoc 来为指定模块生成 HTML 文档。

16.1.2	生成HTML文档

使用 pydoc 模块在控制台中查看帮助文档的命令如下：
python -m pydoc -w 模块名

上面命令主要就是为 pydoc 模块额外指定了 -w 选项,该选项代表 write,表明输出 HTML 文档。
例如,在 codes\16\16.1 目录下运行如下命令。
python  -m pydoc -w fkmodule

运行上面命令,可以看到系统生成"wrote fkmodule.html"提示信息。接下来可以在该目录下发现额外生成了一个 fkmodule.html文件,
使用浏览器打开该文件,可以看到如图16.3所示的页面。

将图16.3所示的页面拉到下面,可以看到如图16.4所示的页面。

从图16.3和图16.4所示的页面来看,该 HTML 页面与在控制台中查看的文档信息基本相同,区别在于：
由于这是一个HTML 页面,因此用户可以拖动滑块来上、下滚动屏幕,以方便查看。

需要说明的是,pydoc 还可用于为指定目录生成 HTML 文档。例如,通过如下命令为指定目录下的所有模块生成 HTML 文档。
python3 -m pydoc -w 目录名

但上面命令有一个缺陷——当该命令工具要展示目录下子文件的说明时,会去子目录下找对应的.html 文件,如果文件不存在,就会显示404错误。

如果真的要查看指定目录下所有子目录中的文档信息,则建议启动本地服务器来查看。

16.1.3 启动本地服务器来查看文档信息

启动本地服务器来查看文档信息,可以使用如下两个命令。
python3    -m    pydoc -p 端口号

在指定端口启动 HTTP 服务器,接下来用户可以通过浏览器来查看 Python 的所有模块的文档信息。
python3 -m pydoc -b

在任意一个未占用的端口启动 HTTP 服务器,接下来用户同样可以通过浏览器来查看 Python 的所有模块的文档信息。

例如,在codes\16\16.1 目录下运行如下命令。
python -m   pydoc   -p   8899
该命令工具将会显示如下输出信息。

上面的输出信息提示 HTTP 服务器正在8899端口提供服务,用户可以输入 b 命令来启动浏览器(实际上用户可以自行启动浏览器),
也可以输入 q 命令来停止服务器。

打开浏览器访问http:/localhost:8899/,将会看到如图16.5所示的页面。

从图16.5可以看出,该页面默认显示了当前 Python 的所有模块。其中：
(1)第一部分显示 Python 内置的核心模块。
(2)第二部分显示当前目录下的所有模块,此处显示的就是 fkmodule 模块。
(3)第三部分显示 d:\python_module目录下的所有模块,此时在该目录下并未包含任何模块。 pydoc 之所以显示该目录,
是因为本机配置了PYTHONPATH 环境变量,其值为. ;d:\python_module,因此   pydoc 会自动显示该目录下的所有模块。
换而言之,第三部分用于显示 PYTHONPATH 环境变量所指定路径下的模块。

如果读者将图16.5所示的页面向下拉,将会依次看到 Python 系统在 D:\Python\Python361 DLLs 、D:\Python Python36lib、
D:\Python\Python36\ lib\site-packages路径下的所有模块。

如果要查看指定模块,只要单击图16.5所示页面中的模块链接即可。例如,单击图16.5 所示页面中的"fkmodule"模块链接,
将会看到如图16.6所示的页面。

对比图16.4与图16.6所示的页面不难发现,它们显示的内容是一样的。因此,无论是生成 HTML 页面,
还是直接启动HTTP 服务器,都能看到相同的文档页面。

16.1.4	查找模块

此外,pydoc 还提供了一个 -k 选项,该选项用于查找模块。该选项的语法格式如下：
python -m pydoc -k 被搜索模块的部分内容

例如,在codes\16\16.1 目录下运行如下命令
python     -m     pydoc     -k     fk
可以看到如下输出信息。

从上面的输出信息可以看到,pydoc 找到了包含"fk"的 fkmodule。
"""
