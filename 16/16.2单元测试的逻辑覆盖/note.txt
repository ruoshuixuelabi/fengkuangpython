16.2    软件测试概述

软件测试是保证软件质量的重要手段之一。软件开发和软件测试通常由不同的人员来完成,
软件开发人员较少直接参与软件测试(在测试人员缺乏的情况下,也可以让软件开发人员直接参与测试,测试由另一组开发人员开发的软件),
但是其对软件测试也应该有一定的了解。

软件测试的工作量通常占软件开发总工作量的40%,在某些极端的情况下,例如那些关系到生命、财产安全的软件所花费的测试成本,
可能相当于软件工程其他开发步骤的3~5倍。

16.2.1  软件测试的概念和目的

从广义的角度来看,软件测试包括在软件产品生存周期内所有的检查、评审和确认活动,如设计评审、系统测试等。
从狭义的角度来看,软件测试的范围要小得多,它单指对软件产品的质量进行测试。

关于软件测试,IEEE 给出了如下定义。
"测试是使用人工和自动手段来运行或检测某个系统的过程,其目的在于检验系统是否满足规定的需求,或者弄清预期结果与实际结果之间的差别。"

除此之外,Glen Myers(梅尔斯)提出的定义也曾被许多人所接受。
(1)软件测试是为了发现软件隐藏的缺陷。
(2)一次成功的软件测试是发现了尚未被发现的缺陷。
(3)软件测试并不能保证软件没有缺陷。

不同的人员对待软件测试具有不同的态度。对于用户来说,他们希望通过软件测试来发现软件中潜在的缺陷和问题,
以考虑是否需要接受该软件产品;对于开发人员来说,他们希望测试成为软件产品中不存在缺陷和问题的证明过程,
从而表明该软件产品已经能满足用户的需求。

软件测试并不是软件质量保证。前者从"破坏"的角度出发,力图找出软件的缺陷;后者从"建设"的角度出发,监督和改进过程,尽量减少软件的缺陷。
软件质量保证贯穿整个软件开发过程,从需求分析开始,一直到最后系统上线。

总体来说,软件测试的目的在于以最少的时间和人力,系统地找出软件中潜在的各种错误和缺陷。

软件质量保证期望尽可能早地发现并纠正软件中的所有缺陷,但实际上这是不可能的,因为软件本身的复杂性,以及引起软件缺陷的来源如此之多。
(1)编程错误：只要是程序员,就有可能犯错误。
(2)软件的复杂度：软件的复杂度随软件的规模以指数级数增长,软件的分布式应用、数据通信、多线程处理等都增加了软件的复杂度。
(3)不断变更的需求：软件的需求定义总是滞后于实际的需求,如果实际的需求变更太快,软件就难以成功。
(4)时间的压力：为了追上需求的变更,软件的时间安排非常紧张,随着最后期限的到来,缺陷被大量引入。
(5)开发平台本身的缺陷：类库、编译器、链接器本身也是程序,它们也可能存在缺陷,新开发的系统也就无法幸免。

软件开发过程的质量保证无法保证软件没有缺陷。即使进行了软件测试,甚至进行了上百万次的测试,也依然不能保证软件没有缺陷。

软件测试是不可穷举的,因此,软件测试是在成本与效果之间的平衡选择。软件测试在软件生命周期中横跨两个阶段：
通常在编写出每个模块之后,程序开发者应该完成必要的测试,这种测试称为单元测试;
在各个阶段结束后,还必须对软件系统进行各种综合测试,这部分的测试通常由测试人员来完成。

测试的目的并不是为了证明程序是正确的,而是为了发现程序的缺陷。与传统的观点——
成功的测试是没有发现缺陷的测试恰恰相反,成功的测试是发现了软件缺陷的测试。测试只能找出软件 中的缺陷,并不能证明软件没有缺陷。

从软件测试的目的来分析,软件测试不应该由软件开发人员来完成。俗语说"自己的孩子自己爱",软件系统是开发人员的心血,
让开发人员来找软件的缺陷,是一件很困难的事情,因为这意味着开发人员要"破坏"自己的系统,从心理上就难以接受。
因此,软件测试通常应该由其他人员组成测试小组来完成。

关于软件测试有以下几条基本原则。
(1)应该尽早并不断地进行软件测试。
(2)测试用例应该由测试输入数据和对应的预期输出结果两部分组成。
(3)开发人员避免测试自己的程序。
(4)在设计测试用例时,至少应该包括合理的输入和不合理的输入两种。
(5)应该充分注意测试中的群集现象,经验表明,测试后程序中残存的错误数目与该程序中已发现的错误数目呈正比。
(6)严格执行测试计划,避免测试的随意性。
(7)应当对每一个测试结果都做全面检查。
(8)妥善保存测试计划、测试用例、出错统计和最终分析报告,为维护提供方便。

16.2.2	软件测试的分类

按照不同的标准,软件测试可以有不同的分类。

从软件工程的总体把握来分,软件测试可分为如下类别。
(1)静态测试：针对测试不运行部分进行检查和审阅。静态测试又分为如下三类。
·  代码审阅：检查代码设计的一致性,检查代码的标准性、可读性,包括代码结构的合 理性。
·  代码分析：主要针对程序进行流程分析,包括数据流分析、接口分析和表达式分析等。
·  文档检查：主要检查各阶段的文档是否完备。
(2)动态测试：通过运行和试探发现缺陷。动态测试又分为如下两类。
·  结构测试(白盒):各种覆盖测试。
·  功能测试(黑盒):集成测试、系统测试和用户测试等。

从软件测试工程的大小来分,软件测试又可分为如下类别。
(1)单元测试：测试中的最小单位,测试特殊的功能和代码模块。由于必须了解内部代码和设 计的详细情况,该测试通常由开发者来完成。
该测试的难易程度与代码设计的好坏直接相关 。
(2)集成测试：测试应用程序结合的部分来确定它们的功能是否正确,主要测试功能模块或独 立的应用程序。
这种测试的难易程度取决于系统的模块粒度。
(3)系统测试：这是典型的黑盒测试,与应用程序的功能需求紧密相关。这类测试应由测试人员来完成。
(4)用户测试：这类测试分为两种,第一种测试由测试人员模拟最终用户来完成,称为α测试;
第二种测试由最终用户来完成,该测试在实际使用环境中试用,这种测试称为β测试。
如果软件的功能和性能与用户的合理期望一致,则软件系统有效。
(5)平行测试：同时运行新开发的系统和即将被取代的旧系统,比较新旧两个系统的运行结果。
通过平行测试,可以在准生产环境中运行新系统而不冒风险,从而对新系统进行全负荷测试来检验性能指标,
为用户熟悉新系统赢得时间,并赢得更多的时间来验证用户指南、使用手册等用户文档。

16.2.3 开发活动和测试活动

在实际的软件开发过程中,开发活动和测试活动往往是同时进行的,其中软件开发团队由软件开发经理负责,
而软件测试团队由软件测试经理负责,两者的活动互相补充,并行向前,两个团队的地位完全平等。

比较常规的流程如下。
① 软件开发人员发布一个新功能、新模块,随之一起提交的还有软件开发文档、发布文档(包括新增了哪些功能、
改进了哪些功能),以及软件安装、部署等相关文档。
② 软件测试人员按照软件开发人员提供的文档来安装、部署新功能、新模块。
③ 软件测试人员准备进行测试,在测试之前要编写详细的测试计划并准备测试用例
④ 软件测试人员进行实际测试,并编写一些自动化测试脚本,以简化下一次的回归测试,然后将测试发现的 Bug 提交到 Bug 管理系统(如Bugzilla)。
⑤ 软件开发人员查看Bug 管理系统,对软件测试人员提交的Bug 进行修复,提交所做的修改,并在Bug管理系统中将该Bug 设为已修复。
⑥ 软件测试人员针对已修复的Bug  进行回归测试。如果 Bug 依然存在,则在 Bug 管理系统中将Bug 重新打开(即将其设为需要修复的Bug)。
重复⑤⑥两个步骤,直到测试没有发现Bug 为止。

16.2.4	常见的Bug管理工具

衔接软件开发活动和软件测试活动的通常就是 Bug 管理系统,对于一些处于初级阶段的公司来说,其往往没有采用专业的Bug 管理工具,
而是采用Excel来管理系统Bug。实际上,使用 Excel 进行 Bug 管理远远不够,而一个专业的 Bug 管理工具会让软件开发、软件测试事半功倍。

对于一个专业的 Bug 管理工具来说,它至少包含如下两个功能。
(1)可以让软件开发和软件测试人员方便地看到每个 Bug 的处理过程。
(2)可以方便地跟踪每个 Bug 的处理过程。

有一些 Bug 管理工具可以与版本控制工具结合使用,这样可以更方便地整合软件开发和软件测试。

目前,常见的主流Bug 管理工具有如下几个。
(1)Bugzilla：一个开源、免费且功能强大的 Bug 管理工具,只是在初次使用时其配置、上手稍微复杂一点。
但是一旦熟悉,几乎就会喜欢上这个 Bug 管理工具。还有一点值得一提,Bugzilla可以与CVS 进行整合开发。
(2)BugFree：一个开源、免费的 Bug 管理工具,它是一款 B/S 结构的 Bug 管理软件。
(3)TestDirector：由 Mercury Interactive公司(著名的软件测试工具提供商,现已被惠普收购)开发的一款商业的软件测试管理工具,
也是业界第一个基于 Web 的测试管理系统,从而允许软件开发和软件测试人员既可在公司内部,也可在公司外部进行测试管理。
(4)JIRA：由 Atlassian 公司提供的一款集项目计划、任务分配、需求管理、Bug 跟踪于一体的商业软件。
实际上, JIRA 已经不再是单纯的 Bug 管理工具,它融合了项目管理、任务管  理和缺陷管理等多方面的功能。
由于Atlassian公司对很多开源项目免费提供Bug 跟踪服务, 因此JIRA 在开源领域的认知度比其他产品要高得多。
(5)ClearQuest：IBM的 Rational旗下的一个专业的 Bug 管理工具,它可以对 Bug 和记录的变化进行跟踪管理,
也可以跟踪一个 Bug 完整的生命周期,从提交到关闭, ClearQuest可以 记录Bug 所有的改变历史。
同时ClearQuest提供了各种方便的查询功能,从而可以及时了解每个Bug 的处理情况。
(6)MantisBT:   一个基于PHP+MySQL    ( 或SQL Server、PostgreSQL)技术开发的 B/S 结构的Bug 管理系统,开源、免费。

对于开发人员来说,最起码需要完成单元测试,用于保证自己所定义的类、函数、方法都是经 过测试的,可以良好地运行;
进一步的,开发者还有责任完成集成测试,用于保证自己所开发的模 块也是经过测试的,可以良好地运行。

开发者所完成的测试都应该是可"复用"的——开发者在修改代码之后,只要重新运行测试用例即可完成测试。
Python为这种可"复用"的测试提供了文档测试和单元测试。
下面依次介绍这两种测试。