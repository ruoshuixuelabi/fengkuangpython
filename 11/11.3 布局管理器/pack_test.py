"""
GUI 编程就相当于小孩子搭积木,每个积木块应该放在哪里,每个积木块显示为多大,也就是对大小和位置都需要进行管理,
而布局管理器正是负责管理各组件的大小和位置的。此外,当用户调整了窗口的大小之后,布局管理器还会自动调整窗口中各组件的大小和位置。

11.3.1	Pack布局管理器

如果使用 Pack 布局,那么当程序向容器中添加组件时,这些组件会依次向后排列,排列方向既可是水平的,也可是垂直的。

下面程序简单示范了 Pack 布局的用法,该程序向窗口中添加了三个Label 组件。
"""
# Python 2.x使用这行
# from Tkinter import *
# Python 3.x使用这行
from tkinter import *

# 创建窗口并设置窗口标题
root = Tk()
# 设置窗口标题
root.title('Pack布局')
for i in range(3):
    lab = Label(root, text="第%d个Label" % (i + 1), bg='#eeeeee')
    # 调用pack进行布局
    lab.pack()
# 启动主窗口的消息循环
root.mainloop()
"""
上面程序创建了一个窗口,然后使用循环创建了三个 Label,并对这三个 Label 使用了 pack()方法进行默认的 Pack 布局。
运行该程序,可以看到如图11.5所示的界面。

图11.5使用的是默认的 Pack 布局,实际上程序在调用pack()方法时可传入多个选项。
例如,通过help(tkinter.Label.pack)命令来查看 pack()方法支持的选项,可以看到如下输出结果。

从上面的显示信息可以看出,pack()方法通常可支持如下选项。
(1)anchor：当可用空间大于组件所需求的大小时,该选项决定组件被放置在容器的何处。
该选项支持N(北,代表上)、E(东,代表右)、S (南,代表下)、W(西,代表左)、NW(西北,代表左上)、NE(东北,代表右上)、
SW(西南,代表左下)、SE(东南,代表右下)、CENTER(中,默认值)这些值。
(2)expand：该 bool 值指定当父容器增大时是否拉伸组件。
(3)fill：设置组件是否沿水平或垂直方向填充。该选项支持 NONE、X、Y、BOTH 四个值,其中 NONE 表示不填充,BOTH 表示沿着两个方向填充。
(4)ipadx：指定组件在 x 方向(水平)上的内部留白(padding)。	
(5)ipady：指定组件在 y 方向(水平)上的内部留白(padding)。	
(6)padx：指定组件在 x 方向(水平)上与其他组件的间距。	
(7)pady：指定组件在 y 方向(水平)上与其他组件的间距。	
(8)side：设置组件的添加位置,可以设置为TOP、BOTTOM、LEFT	或 RIGHT  这四个值的其中之一。
"""