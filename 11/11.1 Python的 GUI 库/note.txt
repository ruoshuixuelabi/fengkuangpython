本章内容会比较"有趣",因为可以看到非常熟悉的窗口、按钮、动画等效果,而这些图形界面元素不仅会让开发者感到更"有趣",
对最终用户也是一种诱惑,用户总是喜欢功能丰富、操作简单的应用,图形用户界面程序就可以满足用户的这种渴望。

正如前面介绍的 Python 库 一 样,Python 提供了大量的 GUI 库,用于创建功能丰富的图形用户界面。
这些 GUI 库大部分是第三方提供的,这就造成了部分开发者的"选择障碍":到底应该选择哪种 GUI 库呢?
实际上开发者完全可以选择自己熟悉的任何 GUI 库,或者干脆就选择 Python 内置的 Tkinter库来开发图形界面程序。

程序以一种"搭积木"的方式将这些图形用户组件组织在一起,就是实际可用的图形用户界面,但这些图形用户界面还不能与用户交互。
为了实现图形用户界面与用户交互操作,还应该为程序提供事件处理,事件处理负责让程序响应用户动作。
通过学习本章内容,读者应该能开发出简单的图形用户界面应用,并提供相应的事件响应机制。本章也会介绍Tkinter库中的图形处理相关知识。

11.1	Python的 GUI 库

前面介绍的所有程序都是基于命令行的,这些程序可能只有一些"专业"的计算机人士才会使用。
例如前面编写的五子棋等程序,恐怕只有程序员自己才愿意玩这么"糟糕"的游戏,很少有最终用户愿意对着黑乎乎的命令行界面敲命令。

相反,如果为程序提供直观的图形用户界面(Graphics User Interface,GUI),最终用户通过拖动鼠标、单击等动作就可以操作整个应用,
这样的应用程序就会很受欢迎(实际上,Windows  之所以广为人知,其最初的吸引力就是来自它所提供的图形用户界面)。
作为一个程序设计者,必须优先考虑用户的感受,一定要让用户感到"爽",程序才会被需要、被使用,这样的程序才有价值。

在真正开始介绍 Python 图形界面编程之前,首先简单介绍一下 Python 的图形用户界面库。
(1)PyGObject：PyGObject 库为基于 GObject 的 C 函数库提供了内省绑定,这些库可以支持GTK+3  图形界面工具集,
因此 PyGObject 提供了丰富的图形界面组件。
(2)PyGTK：PyGTK 基于老版本的 GTK+2 的库提供绑定,借助于底层 GTK+2  所提供的各种可视化元素和组件,
同样可以开发出在 GNOME 桌面系统上运行的软件,因此它主要适用于 Linux/UNIX 系统。
PyGTK 对 GTK+2 的 C 语言进行了简单封装,提供了面向对象的编程接口。其官方网址是 http://www.pygtk.org/
(3)PyQt：PyQt 是 Python 编程语言和 Qt 库的成功融合。Qt 本身是一个扩展的C++ GUI 应用开发框架,
Qt 可以在UNIX、Windows  和 Mac  OS  X上完美运行,因此 PyQt 是建立在Qt 基础上的 Python 包装。所以,PyQt 也能跨平台使用。
(4)PySide：PySide 是由 Nokia 提供的对 Qt 工具集的新的包装库,目前成熟度不如PyQt。
(5)wxPython：wxPython 是一个跨平台的 GUI 工具集,wxPython 以流行的wxWidgets(原名wxWindows)为基础,
提供了良好的跨平台外观。简单来说,wxPython 在 Windows 上调用 Windows 的本地组件、在 Mac  OS上调用Mac  OSX 的本地组件、
在Linux 上调用Linux 的本地组件,这样可以让 GUI 程序在不同的平台上显示平台对应的风格。
wxPython 是一个非常流行的跨平台的GUI 库。其官方网址是http://www.wxpython.org/。

如果读者有需要,则完全可以选择上面这些Python  GUI库来开发图形用户界面。如果考虑开发跨平台的图形用户界面,
则推荐使用PyQt 或 wsPython。

本章所介绍的GUI 库是 Tkinter,它是 Python 自带的 GUI 库,无须进行额外的下载安装,只要导入tkinter包即可使用。