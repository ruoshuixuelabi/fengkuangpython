"""
1.  相比之下,正则表达式对象的 search()、match()、fullmatch()、findall()、finditer()方法的功能更强大一些,
因为这些方法都可额外指定 pos 和 endpos 两个参数,用于指定只处理目标字符串从 pos 开始到 endpos 结束之间的子串。

如下程序示范了使用正则表达式的方法来执行匹配。
2.  下面程序示范了使用正则表达式调用 match()、fullmatch()方法时指定 pos 和 endpos 参数的效果——
在指定这两个参数之后,程序就可以只处理目标字符串的中间一段。此外,通过上面程序也可以体会到编译正则表达式的好处——
程序使用 compile() 函数编译正则表达式之后,该函数所返回的对象就会缓存该正则表达式,从而可以多次利用该正则表达式执行匹配。
比如上面程序多次使用 pa 对象(它缓存了正则表达式)来执行匹配。
"""
import re

# 编译得到正则表达式对象
pa = re.compile('fkit')
# 调用match方法,原本应该从开始匹配,此处指定从索引为4的地方开始匹配,就可以成功匹配了
print(pa.match('www.fkit.org', 4).span())  # (4, 8)
# 此处指定从索引为4到索引6之间执行匹配,匹配失败
print(pa.match('www.fkit.org', 4, 6))  # None
# 此处指定从索引为4到索引8之间执行全匹配,匹配成功
print(pa.fullmatch('www.fkit.org', 4, 8).span())  # (4, 8)
