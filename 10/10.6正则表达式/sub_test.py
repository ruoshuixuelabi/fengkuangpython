"""
1.  如下程序示范了sub()函数的简单用法。
2.  上面程序所使用的 r'-' 是原始字符串,其中 r 代表原始字符串,通过使用原始字符串,可以避免对字符串中的特殊字符进行转义。
3.  在某些情况下,所执行的替换要基于被替换内容进行改变。比如下面程序需要将字符串中的每个英文单词都变成一本图书的名字(程序清单同上)。
4.  上面程序使用sub()函数执行替换时,指定使用fun()函数作为替换内容,而fun()函数则负责在pattern
匹配的字符串之前添加"《疯狂",在pattern 匹配的字符串之后添加"讲义》"。运行上面程序,可以看到如下输出结果。
5.  由于此时还未深入介绍正则表达式的语法,因此前面所使用的正则表达式都很简单,
但此处使用了一个稍微复杂的正则表达式： r'(?P<lang>\w+)'。
6.  r'(?P<lang>\w+)' 正则表达式用圆括号表达式创建了一个组,并使用"?P"选项为该组起名为 lang——所起的组名要放在尖括号内。
剩下的 "\w+"才是正则表达式的内容,其中"\w"代表任意字符；"+"用于限定前面的"\w"可出现一次到多次,
因此"\w+"代表一个或多个任意字符。 又由于程序执行sub()函数时指定了re.A选项,这样"\w"就只能代表ASCⅡ字符,不能代表汉字。
当使用sub()函数执行替换时,正则表达式"\w+"所匹配的内容可以通过组名"lang"来获取,
这样fun()函数就调用了matched.group('lang)来获取"\w+"所匹配的内容。
"""
import re

my_date = '2008-08-18'
# 将my_date字符串里中画线替换成斜线
print(re.sub(r'-', '/', my_date))
# 将my_date字符串里中画线替换成斜线,只替换一次
print(re.sub(r'-', '/', my_date, 1))


# 在某些情况下,所执行的替换要基于被替换内容进行改变。比如下面程序需要将字符串中的每个英文单词都变成一本图书的名字
# 在匹配的字符串前后添加内容
def fun(matched):
    # matched就是匹配对象,通过该对象的group()方法可获取被匹配的字符串
    value = "《疯狂" + (matched.group('lang')) + "讲义》"
    return value


s = 'Python很好,Kotlin也很好'
# 将s里面的英文单词(用re.A旗标控制)进行替换
# 使用fun函数指定替换的内容
print(re.sub(r'(?P<lang>\w+)', fun, s, flags=re.A))
# 上面程序使用sub()函数执行替换时,指定使用fun()函数作为替换内容,而fun()函数则负责在pattern
# 匹配的字符串之前添加"《疯狂",在pattern 匹配的字符串之后添加"讲义》"。运行上面程序,可以看到如下输出结果。
