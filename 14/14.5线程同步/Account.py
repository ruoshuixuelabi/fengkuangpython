"""
关于线程安全,有一个经典的问题——银行取钱问题。从银行取钱的基本流程基本上可以分为如下几个步骤。
① 用户输入账户、密码,系统判断用户的账户、密码是否匹配。
② 用户输入取款金额。
③ 系统判断账户余额是否大于取款金额。
④ 如果余额大于取款金额,则取款成功；如果余额小于取款金额,则取款失败。

乍一看上去,这确实就是日常生活中的取款流程,这个流程没有任何问题。
但一旦将这个流程放在多线程并发的场景下,就有可能出现问题。
注意,此处说的是有可能,并不是说一定。也许你的程序运行了一百万次都没有出现问题,但没有出现问题并不等于没有问题!

按照上面的流程编写取款程序,并使用两个线程来模拟模拟两个人使用同一个账户并发取钱操作。
此处忽略检查账户和密码的操作,仅仅模拟后面三步操作。下面先定义一个账户类,该账户类封装了账户编号和余额两个成员变量。
"""


class Account:
    # 定义构造器
    def __init__(self, account_no, balance):
        # 封装账户编号、账户余额的两个成员变量
        self.account_no = account_no
        self.balance = balance
