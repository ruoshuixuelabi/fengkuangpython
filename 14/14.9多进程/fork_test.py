"""
除可以进行多线程编程之外,Python 还支持使用多进程来实现并发编程。

14.9.1	使用fork创建新进程

Python 的 os 模块提供了一个 fork()方法,该方法可以fork出来一个子进程。简单来说,fork()方法的作用在于：
程序会启动两个进程(一个是父进程,一个是fork出来的子进程)来执行从os.fork() 开始的所有代码。
fork()方法不需要参数,它有一个返回值,该返回值表明是哪个进程在执行。
(1)如果fork()方法返回0,则表明是fork出来的子进程在执行。
(2)如果fork()方法返回非0,则表明是父进程在执行,该方法返回fork()出来的子进程的进程ID。

下面程序示范了使用fork()方法创建新进程的过程。
"""
import os

print('父进程（%s）开始执行' % os.getpid())
# 开始fork一个子进程
# 从这行代码开始,下面代码都会被两个进程执行
pid = os.fork()
print('进程进入：%s' % os.getpid())
# 如果pid为0,表明子进程
if pid == 0:
    print('子进程,其ID为 (%s), 父进程ID为 (%s)' % (os.getpid(), os.getppid()))
else:
    print('我 (%s) 创建的子进程ID为 (%s).' % (os.getpid(), pid))
print('进程结束：%s' % os.getpid())
"""
上面程序中粗体字代码 fork 出来一个子进程,这意味着程序会分别使用父进程和子进程来执行从粗体字代码开始的代码。

在 Linux 或Mac  OSX系统上运行上面程序(Windows不支持fork()方法,因此在Windows 系统上运行上面程序会报错),可以看到如下运行结果。

从上面的运行结果可以看到,此时程序分别使用两个进程执行从"进程进入"到"进程结束"之间的代码,这就是os.fork()方法的作用。

在实际编程中,程序可通过 fork()方法来创建一个子进程,然后通过判断 fork()方法的返回值来确定程序是否正在执行子进程,
也就是把需要并发执行的任务放在if pid == 0:的条件执行体中, 这样就可以启动多个子进程来执行并发任务。

注意：os.fork()方法在Windows 系统上无效,只在UNIX 及类UNIX 系统上有效,UNIX 及类UNIX 系统包括UNIX、Linux 和 Mac OS X。
"""
